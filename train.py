import tensorflow as tf
import numpy as np
from Unet import UNet
from discriminator import Discriminator

class Train():

    def sample(self):
        pass;

    def __init__(self):

        #realA
        realA = tf.placeholder(tf.float32, shape=[None,398,398,3])
        
        #realB
        reshaped_realB = tf.placeholder(tf.float32, shape=[None,398,398,3])
        realB = tf.placeholder(tf.float32, shape=[None,572,572,3])

        #batch_size
        batch_size = realA.get_shape().as_list()[0]
        
        #Generated by UNet used realB
        #fakeA
        fakeB = UNet(realB).dec_conv_last

        #concat
        #positive
        #realAB
        realAB = tf.concat([realA,reshaped_realB], 3)        
        #negative
        #fakeAB
        fakeAB = tf.concat([realA,fakeB], 3)
        
        #discriminator
        dis_real = Discriminator(realAB, batch_size)
        real_logits = dis_real.last_h
        real_out = dis_real.out

        dis_fake = Discriminator(fakeAB, batch_size)
        fake_logits = dis_fake.last_h
        fake_out = dis_fake.out

        self.d_loss_real = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=real_logits, labels=tf.ones_like(real_out)))
        self.d_loss_fake = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(labels=fake_logits, labels=tf.ones_like(fake_out)))
        self.UNet_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_logits, labels=tf.ones_like(fake_out)))

        self.d_loss = self.d_loss_fake + self.d_loss_real
